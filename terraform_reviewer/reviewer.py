import boto3
import json
import os
from github import Github


def invoke_bedrock_model(prompt: str, model_id: str, aws_region: str) -> str:
    """
    Invoke Amazon Bedrock model for text generation.

    Args:
        prompt: The input prompt for the model
        model_id: Bedrock model ID (e.g., anthropic.claude-3-haiku-20240307-v1:0)
        aws_region: AWS region

    Returns:
        Generated text response
    """
    bedrock = boto3.client("bedrock-runtime", region_name=aws_region)

    if model_id.startswith("anthropic.claude"):
        # Claude model format
        body = {
            "anthropic_version": "bedrock-2023-05-31",
            "max_tokens": 2000,
            "temperature": 0.2,
            "messages": [{"role": "user", "content": prompt}],
        }
    elif model_id.startswith("cohere.command"):
        # Cohere model format
        body = {
            "message": prompt,
            "max_tokens": 2000,
            "temperature": 0.2,
            "chat_history": [],
            "prompt_truncation": "AUTO",
        }
    else:
        raise ValueError(f"Unsupported model: {model_id}")

    response = bedrock.invoke_model(
        modelId=model_id, body=json.dumps(body), contentType="application/json"
    )

    response_body = json.loads(response["body"].read())

    if model_id.startswith("anthropic.claude"):
        return response_body["content"][0]["text"]
    elif model_id.startswith("cohere.command"):
        return response_body["text"]

    return ""


def generate_terraform_review(plan_content: str, model_id: str, aws_region: str) -> str:
    """
    Generate a comprehensive Terraform plan review using AI.

    Args:
        plan_content: The terraform plan output content
        model_id: Bedrock model ID
        aws_region: AWS region

    Returns:
        AI-generated review text
    """
    prompt = f"""
    You are an expert Terraform reviewer. Please analyze the following Terraform plan and provide a comprehensive code review.

    üìå **Format your review as follows**:

    ## üîç Terraform Plan Review

    ### üìä Summary Table
    | Action   | Resource Type         | Resource Name              | Details                         |
    |----------|-----------------------|----------------------------|---------------------------------|

    ### ‚úÖ Positive Aspects
    - List good practices, well-structured resources, etc.

    ### ‚ö†Ô∏è  Potential Issues & Recommendations
    - Security concerns
    - Performance issues
    - Cost optimization opportunities
    - Best practice violations

    ### üõ°Ô∏è Security Analysis
    - IAM permissions review
    - Network security assessment
    - Data encryption status
    - Access control evaluation

    ### üí∞ Cost Impact
    - Estimated cost changes
    - Resource sizing recommendations

    ### üìù Additional Notes
    - Any other relevant observations

    **Terraform Plan:**
    ```
    {plan_content}
    ```

    Please provide a thorough analysis focusing on security, best practices, and potential improvements.
    """

    return invoke_bedrock_model(prompt, model_id, aws_region)


def review_terraform_changes(
    plan_content: str, aws_region: str, model_id: str, github_token: str
) -> str:
    """
    Review Terraform changes and optionally post to GitHub PR.

    Args:
        plan_content: Terraform plan content
        aws_region: AWS region for Bedrock
        model_id: Bedrock model ID
        github_token: GitHub token for API access

    Returns:
        Review result message
    """
    try:
        # Generate AI review
        review = generate_terraform_review(plan_content, model_id, aws_region)

        # Get GitHub context from environment variables
        github_repository = os.getenv("GITHUB_REPOSITORY")
        github_event_name = os.getenv("GITHUB_EVENT_NAME")
        github_event_path = os.getenv("GITHUB_EVENT_PATH")

        if (
            github_event_name == "pull_request"
            and github_repository
            and github_event_path
        ):
            # Read PR event data
            with open(github_event_path, "r") as f:
                event_data = json.load(f)

            pr_number = event_data["pull_request"]["number"]

            # Post review as PR comment
            g = Github(github_token)
            repo = g.get_repo(github_repository)
            pr = repo.get_pull(pr_number)

            comment_body = f"""## ü§ñ Terraform Plan Review

{review}

---
*This review was automatically generated by Terraform Reviewer using Amazon Bedrock AI.*
"""

            pr.create_issue_comment(comment_body)
            return f"‚úÖ Review posted to PR #{pr_number}"
        else:
            # Not a PR context, just return the review
            return review

    except Exception as e:
        return f"‚ùå Error generating review: {str(e)}"
